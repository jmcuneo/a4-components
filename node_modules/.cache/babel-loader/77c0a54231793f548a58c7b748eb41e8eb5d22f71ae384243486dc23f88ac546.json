{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\CS\\\\CS4241\\\\a4-AndrewNguyen\\\\myapp\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport './main.css';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(path.join(__dirname, \"..\", \"build\")));\napp.use(express.static(\"public\"));\nconst port = 3000;\n/*\nconst appdata = [\n    {\"Id\": 1, \"model\": \"Toyota\", \"year\": 1999, \"mpg\": 23, \"fuelLoad\": 12, \"tillEmpty\": 23*12},\n    {\"Id\": 2, \"model\": \"Honda\", \"year\": 2004, \"mpg\": 30,\"fuelLoad\": 15, \"tillEmpty\": 30*15 },\n    {\"Id\": 3, \"model\": \"Ford\", \"year\": 1987, \"mpg\": 14,\"fuelLoad\": 10,\"tillEmpty\": 14*10  } // 0 is placeholder\n]\n\napp.use(express.static(__dirname + '/public'));\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.get('/data', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        // ... do something with the data here!!!\n        console.log(\"made it here\")\n\n        //console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.post('/submit', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        console.log( JSON.parse( dataString ) )\n\n        // ... do something with the data here!!!\n        console.log(\"made it here\")\n        console.log(Object. values(JSON.parse( dataString ))[0]);\n\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[2])) ||\n            isNaN(parseInt(Object.values(JSON.parse( dataString ))[3])) ||\n            isNaN(parseInt(Object.values(JSON.parse( dataString ))[4]))\n        ){\n            console.log(\"it broke\")\n        } else{\n            appdata.push({\n                \"Id\": Object. values(JSON.parse( dataString ))[0],\n                \"model\": Object. values(JSON.parse( dataString ))[1],\n                \"year\": parseInt(Object.values(JSON.parse( dataString ))[2]),\n                \"mpg\": parseInt(Object.values(JSON.parse( dataString ))[3]),\n                \"fuelLoad\": parseInt(Object.values(JSON.parse( dataString ))[4]),\n                \"tillEmpty\": parseInt(Object.values(JSON.parse( dataString ))[3]) *\n                    parseInt(Object.values(JSON.parse( dataString ))[4])})\n        }\n\n        //console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.delete('/delete', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        console.log( JSON.parse( dataString ) )\n\n        console.log(\"made it here to delete\")\n\n        console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[0])) ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) <= 0 ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) > appdata.length+1) {\n        } else {\n            for(let i = 0; i < appdata.length; i++) {\n                if(parseInt(Object.values(JSON.parse( dataString ))[0]) === appdata[i].Id){\n                    appdata.splice(i, 1)\n                }\n            }\n        }\n\n        console.log(\"app length: \" + appdata.length)\n        for(let i = 0; i<appdata.length; i++){\n            appdata[i].Id = i + 1;\n        }\n\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.put('/modify', (request, response) => {\n    let dataString = \"\"\n\n    request.on(\"data\", function (data) {\n        dataString += data\n    })\n\n    let indexToChange = 0;\n    let indexFound = false;\n\n    request.on(\"end\", function () {\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[0])) ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) <= 0 ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) > appdata.length\n        ){\n\n        } else{\n            for(let i = 0; i <appdata.length; i++){\n                if(parseInt(Object.values(JSON.parse( dataString ))[0]) === appdata[i].Id){\n                    indexFound = true;\n                    indexToChange = i;\n                }\n\n                if(indexFound && Object.values(JSON.parse( dataString ))[1] !== \"\"){\n                    appdata[indexToChange].model = Object.values(JSON.parse( dataString ))[1];\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[2]) > 0){\n                    appdata[indexToChange].year = parseInt(Object.values(JSON.parse( dataString ))[2]);\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[3]) > 0){\n                    appdata[indexToChange].mpg = parseInt(Object.values(JSON.parse( dataString ))[3]);\n                    appdata[indexToChange].tillEmpty = appdata[indexToChange].mpg * appdata[indexToChange].fuelLoad;\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[4]) > 0){\n                    appdata[indexToChange].fuelLoad = parseInt(Object.values(JSON.parse( dataString ))[4]);\n                    appdata[indexToChange].tillEmpty = appdata[indexToChange].mpg * appdata[indexToChange].fuelLoad;\n                }\n\n            }\n        }\n\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead(200, \"OK\", {\"Content-Type\": \"text/plain\"})\n        response.end(jsonArray)\n    })\n})\n\n\napp.listen( process.env.PORT || port , () => {\n    console.log(`App listening at http://localhost:${port}`)\n})\n\n */\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 180,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","path","require","express","app","use","static","join","__dirname","port","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/andre/Desktop/CS/CS4241/a4-AndrewNguyen/myapp/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport './main.css'\nimport reportWebVitals from './reportWebVitals';\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(path.join(__dirname, \"..\", \"build\")));\napp.use(express.static(\"public\"));\n\nconst port = 3000\n/*\nconst appdata = [\n    {\"Id\": 1, \"model\": \"Toyota\", \"year\": 1999, \"mpg\": 23, \"fuelLoad\": 12, \"tillEmpty\": 23*12},\n    {\"Id\": 2, \"model\": \"Honda\", \"year\": 2004, \"mpg\": 30,\"fuelLoad\": 15, \"tillEmpty\": 30*15 },\n    {\"Id\": 3, \"model\": \"Ford\", \"year\": 1987, \"mpg\": 14,\"fuelLoad\": 10,\"tillEmpty\": 14*10  } // 0 is placeholder\n]\n\napp.use(express.static(__dirname + '/public'));\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.get('/data', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        // ... do something with the data here!!!\n        console.log(\"made it here\")\n\n        //console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.post('/submit', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        console.log( JSON.parse( dataString ) )\n\n        // ... do something with the data here!!!\n        console.log(\"made it here\")\n        console.log(Object. values(JSON.parse( dataString ))[0]);\n\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[2])) ||\n            isNaN(parseInt(Object.values(JSON.parse( dataString ))[3])) ||\n            isNaN(parseInt(Object.values(JSON.parse( dataString ))[4]))\n        ){\n            console.log(\"it broke\")\n        } else{\n            appdata.push({\n                \"Id\": Object. values(JSON.parse( dataString ))[0],\n                \"model\": Object. values(JSON.parse( dataString ))[1],\n                \"year\": parseInt(Object.values(JSON.parse( dataString ))[2]),\n                \"mpg\": parseInt(Object.values(JSON.parse( dataString ))[3]),\n                \"fuelLoad\": parseInt(Object.values(JSON.parse( dataString ))[4]),\n                \"tillEmpty\": parseInt(Object.values(JSON.parse( dataString ))[3]) *\n                    parseInt(Object.values(JSON.parse( dataString ))[4])})\n        }\n\n        //console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.delete('/delete', (request, response) => {\n    let dataString = \"\"\n\n    request.on( \"data\", function( data ) {\n        dataString += data\n    })\n\n    request.on( \"end\", function() {\n        console.log( JSON.parse( dataString ) )\n\n        console.log(\"made it here to delete\")\n\n        console.log(typeof Object.values(JSON.parse( dataString ))[0] === 'string')\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[0])) ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) <= 0 ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) > appdata.length+1) {\n        } else {\n            for(let i = 0; i < appdata.length; i++) {\n                if(parseInt(Object.values(JSON.parse( dataString ))[0]) === appdata[i].Id){\n                    appdata.splice(i, 1)\n                }\n            }\n        }\n\n        console.log(\"app length: \" + appdata.length)\n        for(let i = 0; i<appdata.length; i++){\n            appdata[i].Id = i + 1;\n        }\n\n        console.log(appdata)\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead( 200, \"OK\", {\"Content-Type\": \"text/plain\" })\n        response.end(jsonArray)\n    })\n})\n\napp.put('/modify', (request, response) => {\n    let dataString = \"\"\n\n    request.on(\"data\", function (data) {\n        dataString += data\n    })\n\n    let indexToChange = 0;\n    let indexFound = false;\n\n    request.on(\"end\", function () {\n        if(isNaN(parseInt(Object.values(JSON.parse( dataString ))[0])) ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) <= 0 ||\n            parseInt(Object.values(JSON.parse( dataString ))[0]) > appdata.length\n        ){\n\n        } else{\n            for(let i = 0; i <appdata.length; i++){\n                if(parseInt(Object.values(JSON.parse( dataString ))[0]) === appdata[i].Id){\n                    indexFound = true;\n                    indexToChange = i;\n                }\n\n                if(indexFound && Object.values(JSON.parse( dataString ))[1] !== \"\"){\n                    appdata[indexToChange].model = Object.values(JSON.parse( dataString ))[1];\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[2]) > 0){\n                    appdata[indexToChange].year = parseInt(Object.values(JSON.parse( dataString ))[2]);\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[3]) > 0){\n                    appdata[indexToChange].mpg = parseInt(Object.values(JSON.parse( dataString ))[3]);\n                    appdata[indexToChange].tillEmpty = appdata[indexToChange].mpg * appdata[indexToChange].fuelLoad;\n                }\n\n                if(indexFound && parseInt(Object.values(JSON.parse( dataString ))[4]) > 0){\n                    appdata[indexToChange].fuelLoad = parseInt(Object.values(JSON.parse( dataString ))[4]);\n                    appdata[indexToChange].tillEmpty = appdata[indexToChange].mpg * appdata[indexToChange].fuelLoad;\n                }\n\n            }\n        }\n\n        var jsonArray = JSON.stringify(appdata)\n        response.writeHead(200, \"OK\", {\"Content-Type\": \"text/plain\"})\n        response.end(jsonArray)\n    })\n})\n\n\napp.listen( process.env.PORT || port , () => {\n    console.log(`App listening at http://localhost:${port}`)\n})\n\n */\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n\n\n  </React.StrictMode>\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,YAAY;AACnB,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,MAAME,GAAG,GAAGD,OAAO,CAAC,CAAC;AACrBC,GAAG,CAACC,GAAG,CAACF,OAAO,CAACG,MAAM,CAACL,IAAI,CAACM,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AAC5DJ,GAAG,CAACC,GAAG,CAACF,OAAO,CAACG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEjC,MAAMG,IAAI,GAAG,IAAI;AACjd,QAAQ,CAACe,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTd,OAAA,CAACL,KAAK,CAACoB,UAAU;EAAAC,QAAA,eACfhB,OAAA,CAACH,GAAG;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAGS,CAEpB,CAAC;;AAED;AACA;AACA;AACAtB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}